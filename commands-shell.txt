0. Импортировать модели:

from newspaper.models import *

1. Создать двух пользователей:

user1 = User.objects.create(username='Иван', first_name='Иванов')
user2 = User.objects.create(username='Андрей', first_name='Степанов')

2. Создать два объекта модели Author, связанные с пользователями:

Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category:

Category.objects.create(name='IT')
Category.objects.create(name='Образование')
Category.objects.create(name='Политика')
Category.objects.create(name='Спорт')

4. Добавить 2 статьи и 1 новость:

Post.objects.create(authorArticle=Author.objects.get(authorUser=User.objects.get(username='Иван')), categoryType='AR', title='Заголовок статьи 1', text='Статья на спортивную тематику')
Post.objects.create(authorArticle=Author.objects.get(authorUser=User.objects.get(username='Андрей')), categoryType='AR', title='Заголовок статьи 2', text='Статья касаемо темы Образования')
Post.objects.create(authorArticle=Author.objects.get(authorUser=User.objects.get(username='Иван')), categoryType='NW', title='Заголовок новости 3', text='Обзор последних новостей в сфере IT')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):

p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)

c1 = Category.objects.get(name='IT')
c2 = Category.objects.get(name='Образование')
c3 = Category.objects.get(name='Политика')
c4 = Category.objects.get(name='Спорт')

p1.postCategory.add(c4)
p2.postCategory.add(c2)
p3.postCategory.add(c1, c2)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):

Comment.objects.create(commentUser=User.objects.get(username='Андрей'), commentPost= Post.objects.get(pk=1), text='Ак Барс - победит!')
Comment.objects.create(commentUser=User.objects.get(username='Иван'), commentPost= Post.objects.get(pk=1), text='Вперёд за 4 кубком')
Comment.objects.create(commentUser=User.objects.get(username='Иван'), commentPost= Post.objects.get(pk=2), text='Отличная статья')
Comment.objects.create(commentUser=User.objects.get(username='Андрей'), commentPost= Post.objects.get(pk=3), text='Хорошая новость')
Comment.objects.create(commentUser=User.objects.get(username='Андрей'), commentPost= Post.objects.get(pk=2), text='Любопытное чтиво')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:

Post.objects.get(pk=1).like()
...
Post.objects.get(pk=1).dislike()
...
Post.objects.get(pk=2).like()
...
Post.objects.get(pk=2).dislike()
...
Post.objects.get(pk=3).like()
...
Post.objects.get(pk=3).dislike()
...

Comment.objects.get(pk=1).like()
...
Comment.objects.get(pk=1).dislike()
...
Comment.objects.get(pk=2).like()
...
Comment.objects.get(pk=2).dislike()
...
Comment.objects.get(pk=3).like()
...
Comment.objects.get(pk=3).dislike()
...

8. Обновить рейтинги пользователей:

Author.objects.get(authorUser=User.objects.get(username='Иван')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Андрей')).update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

bestAuthor = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]
print(bestAuthor)

print(User.objects.get(pk=bestAuthor['authorUser']))
print(bestAuthor['ratingAuthor'])

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:

bestPost = Post.objects.all().order_by('-rating').values('id', 'dateCreated', 'authorArticle', 'rating', 'title')[0]
print(bestPost)

print(bestPost['dateCreated'].strftime('%d.%m.%Y %H:%M:%S'))
print(User.objects.get(pk = bestPost['authorArticle']))
print(bestPost['rating'])
print(bestPost['title'])
print(Post.objects.get(title=bestPost['title']).preview())

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:
bestPostComments = Comment.objects.filter(commentPost = bestPost['id']).values('dateCreated', 'commentUser', 'rating', 'text')
print(bestPostComments)
